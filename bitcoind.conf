# Process control

# Run in the background as a daemon and accept commands
#daemon=<0|1>

# Specify pid file (default: bitcoind.pid)
#pid=<file>

# Create new files with system default permissions, instead of umask 077
# (only effective with disabled wallet functionality)
#sysperms=<0|1>


# Connection

# Accept connections from outside (default: 1 if no -proxy or -connect)
#listen=<0|1>


# Bind to given address and always listen on it. Use [host]:port notation for IPv6
#bind=<addr>

# Listen for connections on <port> (default: 8333 or testnet: 18333)
#port=<port>

# Only connect to nodes in network <net> (ipv4, ipv6 or onion)
#onlynet=<net>

# Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)
#onion=<ip:port>

# Connect through SOCKS5 proxy
#proxy=<ip:port>


# Specify connection timeout in milliseconds (default: 5000)
#timeout=<n>


# Allow DNS lookups for -addnode, -seednode and -connect (default: 1)
#dns=<0|1>

# Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)
#dnsseed=<0|1>

# Always query for peer addresses via DNS lookup (default: 0)
#forcednsseed=<0|1>


# Add a node to connect to and attempt to keep the connection open
#addnode=<ip>

# Connect to a node to retrieve peer addresses, and disconnect
#seednode=<ip>

# Connect only to the specified node(s)
#connect=<ip>


# Discover own IP address (default: 1 when listening and no -externalip)
#discover=<0|1>

# Specify your own public address
#externalip=<ip>


# Maintain at most <n> connections to peers (default: 125)
#maxconnections=<n>

# Maximum per-connection receive buffer, <n>*1000 bytes (default: 5000)
#maxreceivebuffer=<n>

# Maximum per-connection send buffer, <n>*1000 bytes (default: 1000)
#maxsendbuffer=<n>


# Threshold for disconnecting misbehaving peers (default: 100)
#banscore=<n>

# Number of seconds to keep misbehaving peers from reconnecting (default: 86400)
#bantime=<n>

# Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6
#whitebind=<addr>

# Whitelist peers connecting from the given netmask or ip. Can be specified multiple times.
# Whitelisted peers cannot be DoS banned and their transactions are always relayed,
# even if they are already in the mempool, useful e.g. for a gateway.
#whitelist=<netmask>


# Loading and checking

# Imports blocks from external blk000??.dat file on startup
#loadblock=<file>

# How many blocks to check at startup (default: 288, 0 = all)
#checkblocks=<n>

# How thorough the block verification of -checkblocks is (0-4, default: 3)
#checklevel=<n>

# Keep at most <n> unconnectable blocks in memory (default: 750)
#maxorphanblocks=<n>

# Set the number of script verification threads
# (-8 to 16, 0 = auto, <0 = leave that many cores free, default: 0)
#par=<n>

# Set database cache size in megabytes (4 to 4096, default: 100)
#dbcache=<n>

# Rebuild block chain index from current blk000??.dat files on startup
#reindex=<0|1>

# Maintain a full transaction index (default: 0)
#txindex=<0|1>


# Wallet

# Do not load the wallet and disable wallet RPC calls
#disablewallet=<0|1>

# Specify wallet file (within data directory) (default: wallet.dat)
#wallet=<file>


# Rescan the block chain for missing wallet transactions on startup
#rescan=<0|1>


# Set key pool size to <n> (default: 100)
#keypool=<n>


# Fee (in BTC/kB) to add to transactions you send (default: 0.00)
#paytxfee=<amt>

# If paytxfee is not set, include enough fee so transactions are confirmed on average within n blocks (default: 1)
#txconfirmtarget=<n>

# Spend unconfirmed change when sending transactions (default: 1)
#spendzeroconfchange=<0|1>


# Upgrade wallet to latest format on startup
#upgradewallet=<0|1>

# Attempt to recover private keys from a corrupt wallet.dat on startup
#salvagewallet=<0|1>

# Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup
#   1 = keep tx meta data (e.g. account owner and payment request information)
#   2 = drop tx meta data
# (default: 1)
#zapwallettxes=<mode>


# Relay

# Relay and mine data carrier transactions (default: 1)
#datacarrier=<0|1>

# Relay non-P2SH multisig (default: 1)
#permitbaremultisig=<0|1>


# Block creation

# Set minimum block size in bytes (default: 0)
#blockminsize=<n>

# Set maximum block size in bytes (default: 750000)
#blockmaxsize=<n>

# Set maximum size of high-priority/low-fee transactions in bytes (default: 50000)
#blockprioritysize=<n>


# JSON-RPC

# Accept command line and JSON-RPC commands
#server=<0|1>

# Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6.
# This option can be specified multiple times (default: bind to all interfaces)
#rpcbind=<addr>

# Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4),
# a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).
# This option can be specified multiple times
#rpcallowip=<ip>

# Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)
#rpcport=<port>

# Username for JSON-RPC connections
#rpcuser=<user>

# Password for JSON-RPC connections
#rpcpassword=<pw>

# Set the number of threads to service RPC calls (default: 4)
#rpcthreads=<n>

# Use OpenSSL (https) for JSON-RPC connections
#rpcssl=<0|1>

# Server certificate file (default: server.cert)
#rpcsslcertificatechainfile=<file.cert>

# Server private key (default: server.pem)
#rpcsslprivatekeyfile=<file.pem>

# Acceptable ciphers (default: TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH)
#rpcsslciphers=<ciphers>


# Notification handling

# Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)
#alertnotify=<cmd>

# Execute command when the best block changes (%s in cmd is replaced by block hash)
#blocknotify=<cmd>

# Execute command when a network tx respends wallet tx input (%s=respend TxID, %t=wallet TxID)
#respendnotify=<cmd>

# Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)
#walletnotify=<cmd>


# Debugging/Testing options

# Output debugging information (default: 0, supplying <category> is optional)
# If <category> is not supplied, output all debugging information.
# <category> can be: addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net.
#debug=<category>


# Use the test network
#testnet=<0|1>


# Generate coins (default: 0)
#gen=<0|1>

# Set the processor limit for when generation is on (-1 = unlimited, default: -1)
#genproclimit=<n>


# Include IP addresses in debug output (default: 0)
#logips=<0|1>

# Prepend debug output with timestamp (default: 1)
#logtimestamps=<0|1>

# Send trace/debug info to console instead of debug.log file
#printtoconsole=<0|1>

# Shrink debug.log file on client startup (default: 1 when no -debug)
#shrinkdebugfile=<0|1>


# Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: 0.00001)
#minrelaytxfee=<amt>
